# Stage 1: Build the application
# Use a specific Node.js version consistent with your development environment
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Install dependencies based on the preferred package manager
# Copy package.json and package-lock.json (or yarn.lock)
COPY package*.json ./
# Use npm ci for cleaner installs in CI/CD environments
RUN npm ci

# Copy the rest of the application code
# Note: .dockerignore should be used to exclude node_modules, .git, etc.
COPY . .

# Build the Next.js application
# This will leverage the `output: 'standalone'` in next.config.ts
RUN npm run build

# Stage 2: Production image
# Use a minimal Node.js image
FROM node:20-alpine AS runner

WORKDIR /app

# Set environment variable for production
ENV NODE_ENV=production
# Optionally, uncomment the following line to disable telemetry during runtime.
# ENV NEXT_TELEMETRY_DISABLED 1

# Create a non-root user for security
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy the standalone output from the builder stage
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./

# Copy static assets
# The standalone output mode requires manually copying the 'public' and '.next/static' folders
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Change ownership of the working directory
USER nextjs

# Expose the port the app runs on (default 3000)
EXPOSE 3000

# Set the default command to run the application
# This uses the server.js file generated by the standalone output
CMD ["node", "server.js"]